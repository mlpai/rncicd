trigger:
  # Pipeline will run for any update pushed to the below listed branches
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#ci-triggers
  branches:
    include:
      - dev
      - main
  paths:
    exclude:
      - ios
      - pipelines/build-ios.yml
      - .editorconfig
      - .gitattributes
      - .gitignore
      - .eslintrc.json
      - README.md

# Pipeline will run for PRs targeting the below listed branches
# https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#pr-triggers
pr:
  branches:
    include:
      - dev
      - hotfix/*
      - release/*
  paths:
    exclude:
      - ios
      - pipelines/build-ios.yml
      - .editorconfig
      - .gitattributes
      - .gitignore
      - .eslintrc.json
      - README.md


jobs:
  - job: Phase_1
    displayName: Build Android
    timeoutInMinutes: 45
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: ubuntu-latest
    steps:
      # Checkout
      - checkout: self

      # NodeTool@16
      - task: NodeTool@0
        displayName: "Use Node 16.x"
        inputs:
          versionSpec: '16.x'
      
      - script: |
          yarn install
        displayName: "Install modules"

      # Print Java Version
      - task: CmdLine@2
        displayName: Print Java version
        inputs:
          script: java -version
      - powershell: |
          $rev=$env:BUILD_BUILDNUMBER
          $version = "$(MajorVersion).$(MinorVersion).$(PatchVersion)"

          $NewAndroidVersionCode = $(AndroidVersionCode)+1
          Write-Host "Current Android Version Code is $(AndroidVersionCode)"
          Write-Host "Next Android Version Code is $NewAndroidVersionCode"
          # Write-Host $(PAT)

          # $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "","$(PAT)")))
          # Write-Host $base64AuthInfo
          # Write-Host $(API)
          # $json = '{"id":2,"type":"Vsts","name":"Mobile","variables":{"AndroidVersionCode":{"isSecret":false,"value":"' + $NewAndroidVersionCode + '"},"PAT":{"isSecret":true,"value":"$(PAT)"},"API":{"isSecret":false,"value":"$(API)"}}}'
          # Write-Host $json
          # $pipeline = Invoke-RestMethod -Uri $(API) -Method Put -Body $json -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
          # Write-Host "New Variable Value:" $pipeline.variables.AndroidVersionCode.value


          $build_number = "$version.$NewAndroidVersionCode"

          $final_build_number=$build_number 
          If ($final_build_number.StartsWith("v")) {
              $final_build_number=$final_build_number.Substring(1)
          }

          Write-Host "Setting Build Number to $env:BUILD_DEFINITIONNAME_$final_build_number"
          Write-Host("##vso[build.updatebuildnumber]$env:BUILD_DEFINITIONNAME_" + $final_build_number)

          Write-Host "Setting version code"
          Write-Host("##vso[task.setvariable variable=versionCode;]$NewAndroidVersionCode")
          Write-Host "Version Code: $env:versionCode"

          Write-Host "Setting bundle version string"
          Write-Host("##vso[task.setvariable variable=versionName;]$version")
          Write-Host "Bundle version string: $(versionName)"
        displayName: Set Build Version and Code

        # Generate AABs and APKs
      - task: Gradle@2
        displayName: "Generate AABs and APKs"
        inputs:
          gradleWrapperFile: android/gradlew
          workingDirectory: android
          tasks: "bundle assemble"
          publishJUnitResults: false
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.8"
          gradleOptions: "-Xmx3072m"
          sonarQubeRunAnalysis: false
          testResultsFiles: "**/build/test-results/TEST-*.xml"
        # Copy Lint Files
      - task: CopyFiles@2
        displayName: Copy Lint Files
        condition: succeededOrFailed()
        inputs:
          SourceFolder: $(build.sourcesdirectory)
          Contents: "**/lint-results.*"
          TargetFolder: $(build.artifactstagingdirectory)
          flattenFolders: true

      # Copy Generated AABs and APKs
      - task: CopyFiles@2
        displayName: "Copy Generated AABs and APKs to Artifacts"
        inputs:
          sourceFolder: "$(build.sourcesdirectory)"
          contents: |
            **/app-debug.aab
            **/app-release.aab
            **/app-debug.apk
            **/app-release-unsigned.apk
          targetFolder: "$(build.artifactstagingdirectory)"
          flattenFolders: true

      # Rename Generated AABs and APKs
      - task: Bash@3
        displayName: "Rename Generated AABs and APKs"
        inputs:
          workingDirectory: "$(build.artifactstagingdirectory)"
          targetType: "inline"
          script: |
            mv app-debug.aab hc-ministry-debug.aab
            mv app-release.aab hc-ministry-release-unsigned.aab
            mv app-debug.apk hc-ministry-debug.apk
            mv app-release-unsigned.apk hc-ministry-release-unsigned.apk
      
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)